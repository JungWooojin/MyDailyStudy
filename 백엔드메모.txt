패키지 사용이유 : 유일성
웹도메인으로 패키지 이름 설정시 중복될 일이 없다. ex) com.
main- 프로그램의 시작점 (유기적인 동작) - 호출하면서 시작
JDK - 자바를 이용하기 위해 도움을 주는 도구 ->api
JRE - 자바실행시 다른 jdk호환을 도움( 맥/리눅스 등등) - JVM도 안에 포함되어 있음
JVM - 자바 메모리 관리 (자동으로 메모리를 관리해줌) -GC가 안에 포함되어 있음
메소드 호출= 소괄호- ("문자열")
세미콜론(;) - 마침표
주석하는법 -//single live comments
        /* multi line comments
        */
ctrl+shift+f10 새로고침
int n1 => int는 변수타입 n1은 변수명 (단, 같은이름변수선언은 중복으로 하면 x)
= 기준으로 양쪽의 타입이 같아야 함
대입연산자(=)로 밖에 값 변경을 할 수 없다
 System.out.printf("%c : %d \n", c1, (int)c1);  c,d 는 타입 %는 자리
정수형: byte, short, int, long - int가 가장 빠름
실수형: float, double
문자형: char
불린형 : boolean
8개. primitive type(원시 타입, 기본 타입) -유일하게 소문자로 시작, 리터럴저장
나머지 대문자 시작 reference type (참조 타입)- 객체의 주소값 저장 ex) String s1 ="Hello"; -> "Hello"의 주소값이 s1에 저장
String은 문자열
안녕은 String타입 , 1은 정수타입
연산순서대로 앞에서 부터 계산
// 파스칼 케이스 기법 > 클래스명
 // 카멜 케이스 기법 > 변수명, 메소드명
문자열 비교는 equals로 한다.
PTRIN PTRINLN => 대행을 해주는 게 println
리터럴 = 기준 오른쪽 값
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
sout 치고 엔터치면 system.out.println 자동 입력
초기화 - 최초의 값
기본 실수타입(10.0)의 리터럴 값은 double이다. 숫자뒤 d가 기본적전제 10일경우 정수형타입 10.0일경우 실수형타입

객체화 한 문자열비교는 equals로 한다.
상수는 한번입력된값이 변하지 않음 리터럴값은 10였지만 11였을수도 있고 12였을수도있는 값 그러니까 절댓값은 아니다. 상수는 절댓값느낌
상수는 변수에 비해 속도가 빠름

equals는 참조변수에서 참조하는 객체에 있는 그 안의 변수값이 문자열일때 그 문자열 자체를 비교할 때 사용하는 것이다. 참조변수는 초기화하는 것이 아닌 객체를 참조하는 것이다.
자바명이랑 클래스명이랑 같아야 한다.
파일명이랑 같은 것만 public을 붙일 수 있다. 나머진 에러
main 치면 자동완성 public static void main

나머지값 구할떄는 mod (%)를 사용한다. => 짝수인지 홀수인지 확인할때 주로 사용 , 2로 나눴을 때 0 이면 짝수, 1이면 홀수

양수표시는 생략이 가능 +3 - +5
int num = 5;
       num = - num; ==> 결과값: -5
n1 = n2 = val = 10 해야만 n1에도 10이 입력된다 n1,n2,val = 10 은 X

and 연산자는 속도처리 때문에 false 값이 나올확률이 높은 것을 앞쪽에 배치하는것이 좋다.
or 연산자는 true 값이 나올 확률이 높은것을 앞쪽에 배치하는 것이 속도처리가 좋다

처음 값을 줄때만 초기화한다고 표현을 하고 그다음부터는 대입했다고 표현해야한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 ! 뒤에는 boolean만 가능

조건식은 boolean타입이다. 

if(조건식)도 boolean타입이여야한다


문자열 쓸 때 switch

"".equals(season) 이 더 안전하다. season.equals("")보다 !



스코프는 괄호안에서만 변수가 작동하기 때문에 괄호나 범위 밖으로 벗어나면 같은 문자로 재선언을 하여도 영향이 없다. ( 단, 같은 범위 안일시 오류가 난다.)
\t은 정렬을 가지런히 해준다! => printf에서! 

for문은 정확히 몇번 돌릴지 알때 돌리는게 좋고 while은 0이 될때까지 돌리고싶다라던지 불명확할때 사용하기 좋다. 

continue는 스킵처럼 사용

배열의 친구는 for문 반복문이다.





노션 정리
자바 카테고리 안에 그날배운 내용 정리 =>파생해서 노트정리 
프로젝트때 문제 생긴점을 메모 
면접때도 노션정리칭찬
공부 ㅈㄴ빡샘 ,복습이 중요, 개인 프로젝트를 팀프로젝트와 겸해서 혼자 꼭 해봐라 


1차땐 서로 몰라서 싸우고 2차,3차는 이해가 감
스프링 과 sql배우고 조금씩 준비가능 (3개월차)

 
































